:py:mod:`pyslam.capture.common.monocular_uncalibrated_camera.MonocularUncalibratedFileCamera`
=============================================================================================

.. py:module:: pyslam.capture.common.monocular_uncalibrated_camera.MonocularUncalibratedFileCamera


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyslam.capture.common.monocular_uncalibrated_camera.MonocularUncalibratedFileCamera.MonocularUncalibratedFileCamera




.. py:class:: MonocularUncalibratedFileCamera(fName: str, openCVColorCode: int, uid: Optional[pyslam.uid.UID] = None)

   Bases: :py:obj:`pyslam.capture.Sensor`\ [\ :py:obj:`pyslam.capture.common.monocular_uncalibrated_camera.MonocularUncalibratedCameraMeasurement.MonocularUncalibratedCameraMeasurement`\ ]

   A sensor that can read from a monocular camera
   that's available as a file(for example, a camera
   at /dev/video0). Internally uses opencv for all
   capture logic.

   :param fName: The file name of the camera we want
     to capture from.
   :param openCVColorCode: The opencv color conversion code that, when used
     with cv2.cvtColor, takes the inputted mat and outputs the correct
     black and white image. An example would be cv.COLOR_BGR2GRAY, but
     obviously it varies based on which camera you're taking it from.
     Set to -1 if the source camera is black and white.
   :param uid: An optional UID object to use as this Sensor's UID.

   .. py:method:: makeActive(captureFrequency: float) -> None

      When called, the framework is asking this sensor to be
      prepared to start returning captures. Internally, this
      function can be used for any setup needed to get the sensor
      into an active state.

      For example, for a camera, this might
      start an interal capture loop that gets opencv frames from the
      camera at some frequency, and then saves them to some internal
      buffer. This would allow the getCapture() function to complete
      almost instantly, by simply popping the most recent capture
      off the buffer.

      :param captureFrequency: The number of times per second this
        sensor should yield a measurement.


   .. py:method:: getMeasurement() -> pyslam.capture.common.monocular_uncalibrated_camera.MonocularUncalibratedCameraMeasurement.MonocularUncalibratedCameraMeasurement

      A function that returns the latest
      measurement from this sensor. This is expected
      to return almost immediately


   .. py:method:: leaveActive() -> None

      Performs any cleanup to take this sensor out of an active state.
      For example, turn a camera sensor to an idle state and stop
      capturing frames.



