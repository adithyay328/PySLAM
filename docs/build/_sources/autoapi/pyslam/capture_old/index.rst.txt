:py:mod:`pyslam.capture_old`
============================

.. py:module:: pyslam.capture_old


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   Capture/index.rst
   CaptureGroup/index.rst
   CaptureManager/index.rst
   RawSensor/index.rst
   SensorWrapper/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pyslam.capture_old.Capture
   pyslam.capture_old.CaptureGroup
   pyslam.capture_old.CaptureManager
   pyslam.capture_old.RawSensor
   pyslam.capture_old.SensorWrapper




.. py:class:: Capture(sensorWrapperUID: str, uid: Optional[str] = None)

   Bases: :py:obj:`abc.ABC`

   This class represents a "capture" from a Sensor(akin to a single
   sensor measurement for other kinds of sensors). This is an
   abstract base class, with specific types of captures being
   subclassed from here. Subclasses can have extra properties
   specific to that type of capture, such as a depth map

   .. py:property:: sensorWrapperUID
      :type: str


   .. py:property:: uid
      :type: str



.. py:class:: CaptureGroup(listOfCaptureUIDs)

   A group of capture object UIDs together. Just a type that wraps around a
   list.


.. py:class:: CaptureManager(stopEvent: threading.Event, captureRate: int = 5)

   This class is responsible for managing all
   physical sensors attached to this system;
   i.e. all SensorWrappers are registered with an instance
   of this class. Also contains a lookup for all
   captures we extract.

   .. py:method:: __captureLoop()

      The internal capture loop that the manager runs
      ; expected to be started in a new thread
      by the startCaptureLoop function. Exits when the stop
      flag is set


   .. py:method:: startCaptureLoop()

      Starts the internal capture loop in a separate process.


   .. py:method:: register(sensorWrapper)

      Registers a new sensor wrapper with this CaptureManager.



.. py:class:: RawSensor

   Bases: :py:obj:`abc.ABC`

   An abstract class that implements
   the core functions of a raw sensor. Specific
   types of sensors can derive themselves from this.

   .. py:method:: activateSensor()
      :abstractmethod:

      A function that performs any needed sensor
      initialization and prepares the sensor
      for a capture call. As an example, this might
      tell opencv to start capturing video
      from a camera so that when the SensorWrapper
      calls for a capture, it happens as
      fast as the sensor can manage.


   .. py:method:: teardownSensor()
      :abstractmethod:

      The opposite of startCapture; any cleanup that needs
      to be done is done here,
      and this function tells the sensor to stop recording and
      go into a standby state.
      In the context of a camera, this could mean telling opencv
      to stop capturing frames
      and put the camera into an idle state.


   .. py:method:: capture(sensorWrapperUID) -> pyslam.capture_old.Capture.Capture
      :abstractmethod:

      Returns a Capture object populated with the data
      the sensor collected.



.. py:class:: SensorWrapper(name: str, rawSensor: pyslam.capture.RawSensor)

   Bases: :py:obj:`abc.ABC`

   This class wraps around a raw object for a physical sensor attached to our system.
   This class deals with getting captures from that sensor, and all the piping
   and inter-process communication related to that.

   The ImageSensor has a couple high-level functions it needs to support:
     1. Support for a capture loop. When commanded, image sensors should
      be able to put themselves into a capture loop state, where the
      timings of their captures are entirely decided by the capture
      loop in the CaptureManager. This should be in a different thread
      to allow for more accurate timing.
     2. Take a single capture. This seems like a pretty fundamental
       thing to be able to do,
        and so all SensorWrappers allow this. The way this is
        implemented is with 2 cases, one where the Sensor is in
        a capture loop and one where it isn't.
         a. When in a capture loop, we shouldn't inerfere with the
            capture and should instead grab a copy of the most recent
            capture from the camera loop. To do this, we have an internal queue
            where we post the most recent capture from the loop. When
            you want to get a capture, simply wait for this queue to have
            one on it.
         b. In the case where we aren't currently in a capture loop, simply
             start capturing, pull a frame, and stop capturing.


   .. py:method:: __startCapture()

      Sets active flag to true, acquires the capture lock,
      and configures our sensor to be ready for capture


   .. py:method:: __endCapture()

      Sets active flag to false, clears the capture lock,
      and tears down the sensor.


   .. py:method:: __captureLoop()

      The internal capture loop function that startCaptureLoop executes in a
      different thread


   .. py:method:: startCaptureLoop()

      External function to start the capture loop
      in its own multi-process


   .. py:method:: getCapture()

      This function implements a thread-safe and non-intrusive
      way to get the latest capture from the sensor. It deals
      with the problems of co-operating with the capture loop
      if it's currently running, and generally makes it easy
      to get a capture from a SensorWrapper



